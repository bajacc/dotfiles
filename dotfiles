#!/usr/bin/env python3

from pathlib import Path
from typing import List
import shutil
import argparse
import sys

class Command:
    INSTALL = 'install'
    SYNC = 'sync'

REPO_DOTFILES_PATH = Path(__file__).resolve().parent / Path('home')

def parse_path() -> List[Path]:
    with open('files.txt', 'r', encoding='utf-8') as f:
        return [REPO_DOTFILES_PATH / Path(p) for p in f.read().split('\n')]

def is_installed(repo_path: Path, real_path: Path) -> bool:
    return real_path.is_symlink() and real_path.readlink() == repo_path

def repo_to_real_path(repo_path: Path) -> Path:
    return Path.home() / repo_path.relative_to(REPO_DOTFILES_PATH)

def install(repo_paths: List[Path], force: bool):
    for repo_path in repo_paths:
        if not repo_path.exists():
            raise FileNotFoundError(repo_path)
    
    if not force:
        for repo_path in repo_paths:
            real_path = repo_to_real_path(repo_path)
            if not real_path.exists():
                continue
            if is_installed(repo_path, real_path):
                continue
            
            raise FileExistsError(real_path)
            

    for repo_path in repo_paths:
        real_path = repo_to_real_path(repo_path)
        if is_installed(repo_path, real_path):
            print(f"{real_path} already installed")
            continue
        
        print(f"link {real_path} to {repo_path}")
        if real_path.is_file() or real_path.is_symlink():
            real_path.unlink(missing_ok=True)
        elif real_path.is_dir():
            shutil.rmtree(real_path, ignore_errors=True)
        else:
            raise NotImplementedError(f"{real_path} is not a file not a link nor a directory")
        real_path.symlink_to(repo_path)


def sync(repo_paths: List[Path]):
    for repo_path in repo_paths:
        real_path = repo_to_real_path(repo_path)
        if not real_path.exists() or repo_path.exists():
            continue
        
        print(f"copy {real_path} in {repo_path}")
        if real_path.is_symlink():
            real_path = real_path.readlink()

        if real_path.is_file():
            repo_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(real_path, repo_path, follow_symlinks=False)
            real_path.unlink(missing_ok=True)
        elif real_path.is_dir():
            shutil.copytree(real_path, repo_path, dirs_exist_ok=True, symlinks=True)
            shutil.rmtree(real_path, ignore_errors=True)
        else:
            raise NotImplementedError(f"{real_path} is neither a directory nor a file")
        real_path.symlink_to(repo_path)


    for repo_path in REPO_DOTFILES_PATH.rglob('*'):
        real_path = repo_to_real_path(repo_path)
        if repo_path not in repo_paths and is_installed(repo_path, real_path):
            print(f"move {repo_path} to {real_path}")
            real_path.unlink()
            shutil.move(repo_path, real_path)


def parse_args():
    parser = argparse.ArgumentParser(description='Dotfiles utility')
    subparsers = parser.add_subparsers(dest='command', help='Sub-command help')
    parser_install = subparsers.add_parser(Command.INSTALL, help='Install dotfiles')
    parser_install.add_argument('--force', action='store_true', help='Force the installation by overwriting existing files without asking')
    parser_sync = subparsers.add_parser(Command.SYNC, help='Sync dotfiles')
    return parser.parse_args()


if __name__ == "__main__":
    args = parse_args()
    repo_paths = parse_path()
    if args.command == Command.INSTALL:
        install(repo_paths, args.force)
    elif args.command == Command.SYNC:
        sync(repo_paths)